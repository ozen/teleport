/*
 * Teleport
 * Copyright (C) 2023  Gravitational, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package prehog.v1;

import "google/protobuf/timestamp.proto";

message UserActivityReport {
  // randomly generated UUID for this specific report, 16 bytes (in string order)
  bytes report_uuid = 1;
  // anonymized, 32 bytes (HMAC-SHA-256)
  bytes cluster_name = 2;
  // anonymized, 32 bytes (HMAC-SHA-256)
  bytes reporter_hostid = 3;
  // beginning of the time window for this data; ending is not specified but is
  // intended to be at most 15 minutes
  google.protobuf.Timestamp start_time = 4;

  repeated UserActivityRecord records = 5;
}

message UserActivityRecord {
  // anonymized, 32 bytes (HMAC-SHA-256)
  bytes user_name = 1;

  // counter of user.login events
  uint64 logins = 2;

  // counter of session.start events (non-Kube)
  uint64 ssh_sessions = 3;
  // counter of app.session.start events (non-TCP)
  uint64 app_sessions = 4;
  // counter of session.start events (only Kube)
  uint64 kube_sessions = 5;
  // counter of db.session.start events
  uint64 db_sessions = 6;
  // counter of windows.desktop.session.start events
  uint64 desktop_sessions = 7;
  // counter of app.session.start events (only TCP)
  uint64 app_tcp_sessions = 8;
  // counter of port events (both SSH and Kube)
  uint64 ssh_port_sessions = 9 [deprecated = true];
  // counter of kube.request events
  uint64 kube_requests = 10;
  // counter of sftp events
  uint64 sftp_events = 11;
  // counter of port events (only SSH)
  uint64 ssh_port_v2_sessions = 12;
  // counter of port events (only Kube)
  uint64 kube_port_sessions = 13;
}

message SubmitUsageReportsRequest {
  // at most 10 in a single RPC, each shouldn't exceed 128KiB or so
  repeated UserActivityReport user_activity = 1;
}
message SubmitUsageReportsResponse {
  // randomly generated UUID for this specific batch, 16 bytes (in string order)
  bytes batch_uuid = 1;
}

service TeleportReportingService {
  rpc SubmitUsageReports(SubmitUsageReportsRequest) returns (SubmitUsageReportsResponse) {}
}
