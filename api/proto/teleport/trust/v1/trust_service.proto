// Copyright 2023 Gravitational, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package teleport.trust.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "teleport/legacy/types/types.proto";

option go_package = "github.com/gravitational/teleport/api/gen/proto/go/teleport/trust/v1;trustv1";

// TrustService provides methods to manage certificate authorities.
service TrustService {
  // GetCertAuthority returns a cert authority by type and domain.
  rpc GetCertAuthority(GetCertAuthorityRequest) returns (types.CertAuthorityV2);
  // GetCertAuthorities returns all cert authorities with the specified type.
  rpc GetCertAuthorities(GetCertAuthoritiesRequest) returns (GetCertAuthoritiesResponse);
  // DeleteCertAuthority deletes the matching cert authority.
  rpc DeleteCertAuthority(DeleteCertAuthorityRequest) returns (google.protobuf.Empty);
  // UpsertCertAuthority creates or updates the provided cert authority.
  rpc UpsertCertAuthority(UpsertCertAuthorityRequest) returns (types.CertAuthorityV2);
  // GenerateHostCert takes a public key in the OpenSSH `authorized_keys` format and returns
  // a SSH certificate signed by the Host CA.
  rpc GenerateHostCert(GenerateHostCertRequest) returns (GenerateHostCertResponse);
}

// Request for GetCertAuthority
message GetCertAuthorityRequest {
  // Type of certificate authority.
  string type = 1;
  // The domain for the certificate authority.
  string domain = 2;
  // Whether the private key should be included in the response.
  bool include_key = 3;
}

// Request for GetCertAuthorities
message GetCertAuthoritiesRequest {
  // Type of certificate authority.
  string type = 1;
  // Whether the private key should be included in the response.
  bool include_key = 2;
}

// Response for GetCertAuthorities
message GetCertAuthoritiesResponse {
  // The matching certificate authorities.
  repeated types.CertAuthorityV2 cert_authorities_v2 = 1;
}

// Request for DeleteCertAuthority
message DeleteCertAuthorityRequest {
  // Type of certificate authority.
  string type = 1;
  // The domain for the certificate authority.
  string domain = 2;
}

// Request for UpsertCertAuthority
message UpsertCertAuthorityRequest {
  // The certificate authority to create or update.
  types.CertAuthorityV2 cert_authority = 1;
}

// GenerateHostCertRequest is the request for GenerateHostCert.
message GenerateHostCertRequest {
  // key is the SSH public key that the certificate should include.
  bytes key = 1;
  // host_id is the ID of the host the certificate should include.
  string host_id = 2;
  // node_name is the name of the node the certificate should include.
  string node_name = 3;
  // principals is a list of principals that the certificate should include.
  repeated string principals = 4;
  // cluster_name is a list of principals that the certificate should include.
  string cluster_name = 5;
  // role is a system role assigned to the host that will be included on the certificate.
  string role = 6;
  // ttl is the duration the certificate will be valid for. This may be zero for indefinite.
  google.protobuf.Duration ttl = 7;
}

// GenerateHostCertResponse is the response for GenerateHostCert.
message GenerateHostCertResponse {
  // ssh_certificate is the encoded bytes of the SSH certificate generated by the RPC.
  bytes ssh_certificate = 1;
}
